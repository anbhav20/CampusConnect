College Social Platform – Technical Specifications
1. Project Overview
1.1 Introduction
The College Social Platform is a comprehensive web application designed to connect college students across India through a feature‐rich social networking experience. The platform enables users to create profiles, connect with nearby students, join college-specific groups, engage in real-time chat, share posts/updates, view user statistics, and discover verified job/internship opportunities.

1.2 Project Objectives
Dedicated Platform: Create a dedicated social network exclusively for college students.

Seamless Communication: Enable smooth real-time interactions.

Location-Based Discovery: Allow users to find and interact with nearby peers.

Group Facilitation: Support college-specific group creation and management.

Verified Opportunities: Provide a trusted job/internship board with recruiter verification.

User Control: Offer rich profile management (followers, following, block, privacy, account deletion) with intuitive UI elements.

Cost-Effectiveness: Implement a robust solution with minimal recurring costs.

1.3 Technology Constraints
Stack: MERN with PostgreSQL Neon for persistence.

Language: Full support for TypeScript (with strict typing to avoid syntax errors) alongside JavaScript/JSX.

Authentication: Firebase (OAuth via Google and GitHub).

Real-Time Communication: Socket.io.

Image Hosting: Cloudinary API.

Deployment: Vercel/Netlify (frontend), Render/Railway (backend).

2. Functional Requirements

2.1 User Authentication & Management
2.1.1 User Registration
Username System (Updated):

Automatic Generation: On signup, the backend automatically generates a unique username based on the user’s email (e.g., johndoe@gmail.com becomes @johndoe, @john.doe, or @john_doe_123).

Allowed Characters: Underscores (_), periods (.), and numbers are allowed.

Uniqueness Enforcement: Variations are generated if a username already exists.

Profile URLs: Usernames form part of the URL (e.g., domain.com/u/@username).

Searchability: Supports Instagram-like username search.

Username Editing (Post Signup):

Editable: Users can update their username from the Edit Profile section.

Conflict Handling: The system checks for uniqueness on submission; if already taken, a message (e.g., @username already exists) is shown with alternative suggestions.

Quick Change: Tapping a suggestion automatically updates the username.

Registration Methods (Powered by Firebase):

Email Sign-In: Users register using their email address and a password.

Phone Sign-In: Users register using their phone number; Firebase handles OTP verification.

Google Sign-In: Seamless registration using Google OAuth.

GitHub Sign-In: Registration via GitHub OAuth (ensure proper configuration in the Firebase console).

Profile Creation Fields:

Required: Username(auto generated by email i.g, spidey.19@gmail.com, so username generate spidey12, spidey92 etc..), Email/Phone, Password.

Optional: Year, Department, Interests, Bio, Profile Picture (modifiable later).

2.1.2 User Authentication
Login Options (Using Firebase Authentication):

Standard Login: Users can sign in with their Username/Email/Phone along with their Password.

OAuth Login: In addition to the standard login, Firebase OAuth is used for:

Google Sign-In

GitHub Sign-In

Phone Sign-In: Users can also log in using their phone number via OTP verification.

Security Measures:

JWT: Secure token-based authentication is used for maintaining sessions.

Password Recovery: Managed through Firebase’s password recovery methods.

Secure Storage: Passwords are hashed before storage.

2.1.3 User Profile & Social Interactions
Profile Information:

Details: Name, Year, Department.

Contact: Email/Phone with privacy controls.

Media: Profile picture via Cloudinary API.

Additional: Interests and Bio.

Profile Page Enhancements:

Edit Profile Icon:

Desktop: In the user’s profile page, an edit icon is clearly visible. Clicking it opens the device’s file manager for profile picture updates.

Mobile: The edit profile functionality is accessible from the header (using a vertical three-dot menu placed just below the header on the profile page).

Follow & Interaction:

Follow Button: On every user’s profile (except the logged-in user’s own profile), a follow button is displayed next to the username.

Vertical Three-Dot Menu: Next to the follow button, a vertical three-dot icon opens a small overlay (not a separate page) containing:

Block: Allows blocking the user.

Send Message: Initiates direct messaging.

Share To: Copies the user’s profile URL with a copy-link icon.

Cancel: Closes the overlay.

Followers/Following:

Users can view each other's lists of followers and following.

The UI allows users to remove a follower or unfollow someone directly.

Profile Sharing:

Shareable URL: A share button generates a URL (e.g., https://yourapp.com/profile/122321).

Clipboard Copy: The URL is copied automatically when shared.

2.1.4 Sidebar & Settings Menu (Desktop & Mobile)
Desktop Sidebar Settings:

More Option: At the bottom of the desktop sidebar (beneath the profile), a “More” button is added.

Options Under “More”:

Logout: Ends the user session.

Switch Appearance: Toggles between light and dark modes.

Settings: Opens a settings overlay that includes:

Account Privacy: Update privacy settings.

Block: Manage blocked users.

Notification: Configure notification preferences.

Delete Account: On clicking this, the system permanently deletes the user’s account along with all related data from the database.

Mobile Settings:

Vertical Three-Dot (Profile Page): On mobile devices, a vertical three-dot icon appears in the profile header below the main header. Tapping it reveals the settings overlay (same as the desktop “More” options).

Note: All settings actions (logout, switch appearance, update privacy, block, notification, delete account) are fully functional. When a user clicks "Delete Account", their account and all related data are removed from the database.

2.2 Stories, Reels & Media Uploads
Profile & Story Media:

Profile Picture Upload: The edit profile icon opens the device’s native file manager to select a new image.

Stories/Reels:

Creation: Tapping “Add Story/Reel” opens the device’s file manager.

Video Constraints: Users can record or select up to 30-second video clips for stories or reels.

UI Inspiration: Experience modeled closely after Instagram’s seamless interaction.

2.3 Nearby Users Feature
2.3.1 Geolocation
Detection: User location is automatically detected for nearby interactions.

Privacy Toggle: Users can control whether they appear in nearby searches.

Distance Filtering: Displays nearby users based on proximity.

2.3.2 Discovery Interface
User List: Displays key profile details of nearby users.

Engagement Prompt: “Wanna Say Hello?” popup preview.

Direct Messaging: Allows users to quickly send a message.

2.4 Chat System
2.4.1 One-on-One Messaging
Real-Time: Powered by Socket.io.

Message Status: Indicates sent, delivered, and read statuses.

Media Support: Allows text, emojis, GIFs, and images.

2.4.2 Chat Interface
Conversations: Lists recent conversations.

Unread Counts: Shows indicators for unread messages.

Search: Search functionality within conversations.

2.5 Notification System
2.5.1 Notification Types
Alerts: New follow, message, nearby user, and post interaction notifications.

Settings: Customizable notification preferences.

2.5.2 Notification Management
Centralized Tab: All notifications accessible in one location.

Auto Deletion: Notifications expire after 24 hours.

User Preferences: Options to adjust notifications.

2.6 College Groups
2.6.1 Group Management
Creation: Users can create college-specific and cross-college groups.

Admin Roles: Supports up to 7 administrators for managing group content and members.

2.6.2 Group Interaction
Posts & Discussions: Enables posting, commenting, and event announcements within groups.

Member Search: Find specific members in groups.

2.7 Posts System
2.7.1 Post Creation
Content: Supports formatted text and media.

Uploads: Uses Cloudinary API for image/video uploads.

Privacy: Options for public or follower-only posts.

2.7.2 Post Interactions
Engagement: Like, comment, and share posts.

Overlay Actions: A mini overlay for quick actions (e.g., block, send message, share) accessed via the vertical three-dot icon on posts.

2.7.3 Feed Management
Personalized Feed: Display posts from followed users.

Explore: Discover content across the platform.

Group Feed: Dedicated group-specific feeds.

2.8 Settings & Navigation Enhancements
2.8.1 Home/Feed Page Features
Stories Section: A horizontal strip for stories (with functionality similar to Instagram).

Interaction: Tapping a story opens a full-screen viewer; adding a story opens the file manager.

Notification Icon: Real-time notification bell at the top-right.

2.8.2 Bottom Navigation Bar
Fixed Bar (Mobile & Web): Contains:

Home: Main feed.

Search: Explore users, posts, and groups.

Create: Opens post creation modal accessing local files.

Jobs/Internships: Verified job/internship board.

Profile: Directs to the logged-in user’s profile.

2.8.3 Sidebar (Desktop) Additional Options
More Option: At the very bottom of the sidebar (beneath the profile preview), a “More” option with:

Logout

Switch Appearance (Dark/Light toggle)

Settings Overlay: With account privacy, block, notification, and delete account options.

2.8.4 Settings Overlay Details
Account Privacy: Manage profile visibility and related settings.

Block: Manage blocked users.

Notification: Configure how and when notifications are received.

Delete Account: Permanently delete the user account along with all associated data.
When clicked, the system should remove the user’s record and all related data from the PostgreSQL database immediately.

2.9 Additional Profile and Interaction Features
Vertical Three-Dot Menu on Profiles:

Location: Next to the follow button on any user’s profile (except one’s own).

Contents: Opens an inline overlay (not a new page) that includes:

Block: Block the user.

Send Message: Initiate a direct message.

Share To: Copies the profile URL to the clipboard and shows a copy-link icon.

Cancel: Closes the overlay.

Follow Button: Displayed next to the username on other users’ profiles; it does not appear on a user’s own profile.

Followers/Following Management:

Users can view and manage their own lists of followers and following.

Options to remove or unfollow directly via the UI.

2.10 Job/Internship Board
2.10.1 Feature Overview
Verified Listings: Enables recruiters to post jobs/internships with a “Verified” badge.

Search & Filters: Keyword search and filtering based on type, location, and salary.

2.10.2 Functional Requirements
Posting: Recruiters provide role details, company info, and attachments (via file storage APIs).

Verification: Automated (Clearbit/Hunter.io) and manual admin checks before approval.

User Actions:

Students: Can search, bookmark, and apply.

Recruiters: Manage postings through a dashboard.

3. Non-Functional Requirements
3.1 Performance
Fast Load Times: Under 3 seconds on standard connections.

Real-Time Messaging: Latency below 1 second.

User Concurrency: Supports 1,000+ simultaneous users.

3.2 Security
HTTPS: All data transmitted securely.

Threat Mitigation: Defenses against XSS, CSRF, SQL Injection.

JWT & Firebase: Robust authentication and authorization.

Encryption: Data encrypted at rest and in transit.

3.3 Usability
Responsive Design: Fully optimized for desktops, tablets, and mobiles.

Intuitive Navigation: Supports back navigation and touch/swipe interactions.

Error Handling: User-friendly error management and feedback.

3.4 Scalability
Backend Horizontal Scaling

Database Optimization: Indexed and cached queries.

CDN Integration: For quick delivery of static assets.

3.5 Reliability
Uptime Target: 99.9% availability.

Regular Backups: Robust backup and recovery systems.

Graceful Error Handling: Detailed logging and error management.

4. Technical Architecture
4.1 System Architecture
pgsql
Copy
Edit
     ┌────────────────────────┐      ┌────────────────────────────┐      ┌───────────────────────────────┐
     │  Client Layer          │◄────►│  Application Layer         │◄────►│  Data Layer                   │
     │  (React with TSX)      │      │  (Node.js/Express, TS)     │      │  (PostgreSQL Neon)            │
     └────────────────────────┘      └────────────────────────────┘      └───────────────────────────────┘
                ▲                                 ▲                                 ▲
                │                                 │                                 │
                ▼                                 ▼                                 ▼
      ┌────────────────────────┐      ┌────────────────────────────┐      ┌───────────────────────────────┐
      │ External APIs          │      │  Socket.io Server          │      │  Firebase Authentication      │
      │ (Cloudinary, Clearbit,  │      │  (Real-Time Communication) │      │                               │
      │ Hunter.io, etc.)       │      └────────────────────────────┘      └───────────────────────────────┘
4.2 Frontend Architecture
4.2.1 Component Structure
Pattern: Container/Presentational components.

Reusable UI Components: Written in React + TypeScript ensuring strict type safety.

State Management: Managed with React Context API (or Redux as needed).

4.2.2 Routing
React Router: Used for navigation.

Protected Routes: Accessible only after authentication.

Dynamic Routes: For profiles, groups, and job board pages.

4.3 Backend Architecture
4.3.1 API Design
RESTful Endpoints: All functionalities are exposed via secure RESTful endpoints.

Authentication: JWT middleware with strict TypeScript validation.

Validation & Rate Limiting: Ensuring reliable requests.

4.3.2 Real-Time Communication
Socket.io: Used for messaging and live notifications.

Event-Driven: Architecture to manage real-time events.

4.4 Database Schema
Note: The database has been redesigned from a NoSQL to a relational model for PostgreSQL Neon. The schema below uses SQL DDL statements.

Users Table

sql
Copy
Edit
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  phone VARCHAR(20),
  password VARCHAR(255) NOT NULL,
  profile_pic TEXT,
  name VARCHAR(100),
  bio TEXT,
  year VARCHAR(10),
  department VARCHAR(100),
  interests TEXT[],
  appear_in_nearby BOOLEAN DEFAULT TRUE,
  last_location POINT,
  is_recruiter BOOLEAN DEFAULT FALSE,
  company_name VARCHAR(255),
  work_email VARCHAR(255),
  company_website TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Messages Table

sql
Copy
Edit
CREATE TABLE messages (
  id SERIAL PRIMARY KEY,
  sender_id INTEGER REFERENCES users(id),
  receiver_id INTEGER REFERENCES users(id),
  message TEXT,
  type VARCHAR(20),
  status VARCHAR(20),
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Notifications Table

sql
Copy
Edit
CREATE TABLE notifications (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  type VARCHAR(50),
  from_user_id INTEGER REFERENCES users(id),
  content_id INTEGER,
  is_read BOOLEAN DEFAULT FALSE,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Groups Table

sql
Copy
Edit
CREATE TABLE groups (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  description TEXT,
  cover_image TEXT,
  college VARCHAR(100),
  is_college_specific BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Additional join tables for admins, members, and posts might be required.
Posts Table

sql
Copy
Edit
CREATE TABLE posts (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  group_id INTEGER,  -- Optional; a join table could be used if necessary
  content TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Consider separate tables for media, likes, and comments.
Jobs Table

sql
Copy
Edit
CREATE TABLE jobs (
  id SERIAL PRIMARY KEY,
  posted_by INTEGER REFERENCES users(id),
  company_name VARCHAR(255),
  role VARCHAR(100),
  type VARCHAR(50),  -- E.g., 'job' or 'internship'
  description TEXT,
  location VARCHAR(255),
  salary VARCHAR(50),
  required_skills TEXT[],
  verified BOOLEAN DEFAULT FALSE,
  verified_by INTEGER,
  verified_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
5. External Integrations
5.1 Firebase Authentication
Supports Google, Email, Phone authentication with verification.

GitHub OAuth integration.

Implemented with TypeScript for robustness.

5.2 Cloudinary API
Usage: Handles image and video uploads (profile, posts, stories).

Optimization: Automatic image optimizations and secure file storage.

5.3 Socket.io
Provides real-time communication for messaging and notifications.

5.4 Third-Party Verification APIs
Clearbit/Hunter.io: Optional integrations for recruiter and email verification.

6. Development Roadmap
6.1 Sprint Plan

Sprint	Features	Duration
1	Custom OTP & Firebase Authentication	1 Week
2	User Profiles with Follow/Block functionality	1 Week
3	Real-Time Chat with Socket.io and strict TypeScript integration	1 Week
4	Nearby Users Feature & Notifications	1 Week
5	Posts System (CRUD + Likes/Comments)	1 Week
6	College Groups (with Admin Panel)	1 Week
7	Firebase Password Recovery & Settings Panel	1 Week
8	Navigation (Desktop Sidebar & Mobile UI – including settings)	1 Week
9	Username Uniqueness, Profile Share URL, and GitHub Integration	3 Days
10	Job/Internship Board with Verification & Navigation Update	1 Week
6.2 Development Phases
Phase 1 (Sprints 1-3): Set up core infrastructure: authentication, user profiles, and real-time chat (with TypeScript).

Phase 2 (Sprints 4-6): Implement social features: nearby discovery, posts, groups, and notifications.

Phase 3 (Sprints 7-10): Enhance settings, navigation, profile sharing, and job/internship board, including robust account management features (e.g., account deletion with data removal).

7. Deployment Strategy
7.1 Frontend Deployment
Platforms: Vercel/Netlify

Source: Continuous deployment from GitHub.

Configuration: Uses environment variables for API endpoints, Firebase, and Cloudinary.

7.2 Backend Deployment
Platforms: Render/Railway.

Database: PostgreSQL Neon.

Environment: Production configuration with secure database connectivity.

7.3 Monitoring & Maintenance
Error Logging: Integrated with strict TypeScript checks.

Metrics: Track load times, API responses, and user engagement.

Security Updates: Regular patches and rigorous static code analysis.

8. Future Enhancements
8.1 Planned Features
AI-based friend suggestions.

WebRTC video calls.

Anonymous posting.

Study notes sharing.

Events and RSVPs.

8.2 Scalability Considerations
Microservices architecture for specialized functions.

Enhanced caching strategies.

CDN integration for fast asset delivery.

9. Project Structure
bash
Copy
Edit
college-social-platform/
├── client/                           # React Frontend (TypeScript with .tsx)
│   ├── public/
│   └── src/
│       ├── components/              # Reusable UI components
│       ├── pages/                   # Page components
│       ├── hooks/                   # Custom hooks
│       ├── context/                 # Context providers
│       ├── utils/                   # Utility functions/API clients
│       ├── services/                # API service calls
│       ├── assets/                  # Static assets
│       ├── routes/                  # Router configuration
│       └── App.tsx                  # Main application entry
├── server/                           # Node.js + Express Backend (TypeScript supported)
│   ├── config/                      # Configuration files
│   ├── controllers/                 # Route controllers
│   ├── middlewares/                 # Custom middleware
│   ├── models/                      # PostgreSQL ORM/models or raw queries
│   ├── routes/                      # Express routes for APIs (including job board endpoints)
│   ├── services/                    # Business logic (posting, account management, deletion)
│   ├── utils/                       # Utility functions
│   └── server.ts                    # Server entry point (TypeScript)
├── .env                             # Environment Variables for client & server
├── README.md                        # Project documentation overview
└── package.json                     # NPM package manifest and scripts
10. Environment Configuration
10.1 Backend Environment Variables (Example)
ini
Copy
Edit
# Server Configuration
PORT=5000
NODE_ENV=development

# PostgreSQL Neon Connection
DATABASE_URL=postgresql://username:password@neon.host:5432/dbname

# JWT Configuration
JWT_SECRET=secure_jwt_secret_key
JWT_EXPIRY=7d

# Firebase Configuration
FIREBASE_API_KEY=your_api_key
FIREBASE_AUTH_DOMAIN=your_auth_domain
FIREBASE_PROJECT_ID=your_project_id
FIREBASE_STORAGE_BUCKET=your_storage_bucket
FIREBASE_MESSAGING_SENDER_ID=your_sender_id
FIREBASE_APP_ID=your_app_id
FIREBASE_MEASUREMENT_ID=your_measurement_id

# Cloudinary API Configuration
CLOUDINARY_API_ID=your_cloudinary_client_id

# Email Configuration (Optional)
EMAIL_HOST=smtp.provider.com
EMAIL_PORT=587
EMAIL_USER=your_email
EMAIL_PASS=your_password
10.2 Frontend Environment Variables (Example)
ini
Copy
Edit
REACT_APP_API_URL=http://localhost:5000/api
REACT_APP_SOCKET_URL=http://localhost:5000
REACT_APP_FIREBASE_API_KEY=your_api_key
REACT_APP_FIREBASE_AUTH_DOMAIN=your_auth_domain
REACT_APP_FIREBASE_PROJECT_ID=your_project_id
REACT_APP_FIREBASE_STORAGE_BUCKET=your_storage_bucket
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
REACT_APP_FIREBASE_APP_ID=your_app_id
REACT_APP_FIREBASE_MEASUREMENT_ID=your_measurement_id
REACT_APP_CLOUDINARY_CLIENT_ID=your_cloudinary_client_id
Summary of New UI/UX Features
Desktop Sidebar “More” Option:

Located under the profile preview in the sidebar.

Contains Logout, Switch Appearance, and Settings.

Settings overlay includes Account Privacy, Block, Notification, and Delete Account (with functional account and data deletion).

Mobile Settings Access:

A vertical three-dot icon in the profile header that opens the same settings overlay as the desktop version.

Profile Interaction Enhancements:

A follow button appears next to the username on other users’ profiles.

An adjacent vertical three-dot menu provides options to block, send message, share (copy the profile URL with a copy-link icon), and cancel.

Inline overlays are used rather than redirecting to new pages.

Users can manage their followers and following lists and remove connections directly.